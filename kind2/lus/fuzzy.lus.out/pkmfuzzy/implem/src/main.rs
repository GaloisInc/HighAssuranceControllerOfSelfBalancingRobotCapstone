//! Implementation for lustre node `pkmfuzzy` (see [Pkmfuzzy](struct.Pkmfuzzy.html)).
//!
//! Code generated by the [Kind 2 model checker][kind 2].
//!
//! [kind 2]: http://kind2-mc.github.io/kind2/ (The Kind 2 model checker)

// Deactiving lint warnings the transformation does not respect.
#![allow(
  non_upper_case_globals, non_snake_case, non_camel_case_types,
  unused_variables, unused_parens
)]

#![no_std]

use helpers::* ;

/// Entry point.
fn main() {
  // clap_and_run()
}


/// Stores the state for **top node** `pkmfuzzy`.
///
/// # Inputs
///
/// | Lustre identifier | Type |
/// |:---:|:---|
/// | `i` | Int |
/// | `x` | Real |
///
/// # Outputs
///
/// | Lustre identifier | Type |
/// |:---:|:---|
/// | `y1` | Real |
/// | `y2` | Real |
///
/// # Sub systems
///
/// | Lustre identifier | Struct | Inputs | Outputs | Position |
/// |:---:|:---:|:---:|:---:|:---:|
/// | `center_calc1` | [Center_calc1](struct.Center_calc1.html) | `i`, `x`, `abs_2` | `abs_3` | [fuzzy.lus line 70](../src/lus/fuzzy.lus.html#70) |
/// | `center_calc1` | [Center_calc1](struct.Center_calc1.html) | `i`, `x`, `abs_0` | `abs_1` | [fuzzy.lus line 68](../src/lus/fuzzy.lus.html#68) |
///
/// # Assertions
///
/// /// No assertions for this system.
///
/// # Assumptions
///
/// No assumptions for this system.
///
#[repr(C)]
  pub struct Pkmfuzzy {
  /// Input: `pkmfuzzy.usr.i`
  pub svar_i: Int,
  /// Input: `pkmfuzzy.usr.x`
  pub svar_x: Real,

  /// Output: `pkmfuzzy.usr.y1`
  pub svar_y1: Real,
  /// Output: `pkmfuzzy.usr.y2`
  pub svar_y2: Real,

  /// Local, call: `pkmfuzzy.res.abs_3`
  pub svar_abs_3: Real,
  /// Local, invisible local: `pkmfuzzy.res.abs_2`
  pub svar_abs_2: Bool,
  /// Local, call: `pkmfuzzy.res.abs_1`
  pub svar_abs_1: Real,
  /// Local, invisible local: `pkmfuzzy.res.abs_0`
  pub svar_abs_0: Bool,
  /// Local, local: `pkmfuzzy.impl.usr.center`
  pub svar_center: Bool,
  /// Local, local: `pkmfuzzy.impl.usr.right`
  pub svar_right: Bool,
  /// Local, local: `pkmfuzzy.impl.usr.left`
  pub svar_left: Bool,
  /// Local, local: `pkmfuzzy.impl.usr.d`
  pub svar_d: Int,
  /// Local, local: `pkmfuzzy.impl.usr.pcenter7`
  pub svar_pcenter7: Real,
  /// Local, local: `pkmfuzzy.impl.usr.pcenter6`
  pub svar_pcenter6: Real,
  /// Local, local: `pkmfuzzy.impl.usr.pcenter5`
  pub svar_pcenter5: Real,
  /// Local, local: `pkmfuzzy.impl.usr.pcenter4`
  pub svar_pcenter4: Real,
  /// Local, local: `pkmfuzzy.impl.usr.pcenter3`
  pub svar_pcenter3: Real,
  /// Local, local: `pkmfuzzy.impl.usr.pcenter2`
  pub svar_pcenter2: Real,
  /// Local, local: `pkmfuzzy.impl.usr.pcenter1`
  pub svar_pcenter1: Real,

  /// Call to `center_calc1` ([fuzzy.lus line 68](../src/lus/fuzzy.lus.html#68)).
  pub center_calc1_1: Center_calc1,
  /// Call to `center_calc1` ([fuzzy.lus line 70](../src/lus/fuzzy.lus.html#70)).
  pub center_calc1_0: Center_calc1,
}

impl Sys for Pkmfuzzy {
  type Input = (
    Int, // svar_i (pkmfuzzy.usr.i)
    Real, // svar_x (pkmfuzzy.usr.x)
  ) ;
  type Output = (
    Real, // svar_y1 (pkmfuzzy.usr.y1)
    Real, // svar_y2 (pkmfuzzy.usr.y2)
  ) ;
/*  fn arity() -> usize { 2 }
*//*  fn input_of(vec: Vec<String>) -> Result<Self::Input, String> {
        match vec.len() {
          n if n == Self::arity() => {
            (
              try!( parse::int(& vec[0]) ), 
              try!( parse::real(& vec[1]) ),
            ) 
          },
          n => Err(
            format!(
              "arity mismatch, expected {} but got {}: {:?}",
              Self::arity(), n, vec
            )
            
          ),
        }
      }

*/   fn init(input: Self::Input) -> Self {
    // |===| Retrieving inputs.
    let svar_i = input.0 ;
    let svar_x = input.1 ;
    
    // |===| Computing initial state.
    let svar_pcenter1 = - 1f64 ;
    let svar_pcenter2 = - 19f64 / 20f64 ;
    let svar_pcenter3 = - 9f64 / 10f64 ;
    let svar_pcenter4 = 0f64 ;
    let svar_pcenter5 = 9f64 / 10f64 ;
    let svar_pcenter6 = 19f64 / 20f64 ;
    let svar_pcenter7 = 1f64 ;
    let svar_d = 7 ;
    let svar_left = ((svar_i == 1) & (svar_x < svar_pcenter1)) ;
    let svar_right = ((svar_i == svar_d) & (svar_x > svar_pcenter7)) ;
    let svar_center = ( if (svar_left | svar_right) { false } else {true } ) ;
    let svar_abs_0 = true ;
    let svar_abs_2 = false ;
    let center_calc1_1 = Center_calc1::init( (
      svar_i,
      svar_x,
      svar_abs_0,
    ) ) ;
    let (
      svar_abs_1,
    ) = center_calc1_1.output() ;
    
    let center_calc1_0 = Center_calc1::init( (
      svar_i,
      svar_x,
      svar_abs_2,
    ) ) ;
    let (
      svar_abs_3,
    ) = center_calc1_0.output() ;
    
    let svar_y2 = ( if svar_left { 0f64 } else {( if svar_right { 1f64 } else {svar_abs_3 } ) } ) ;
    let svar_y1 = ( if svar_left { 1f64 } else {( if svar_right { 0f64 } else {svar_abs_1 } ) } ) ;
    
    // |===| Checking assertions.
    
    
    
    
    // |===| Returning initial state.
    Pkmfuzzy {
      // |===| Inputs.
      svar_i: svar_i,
      svar_x: svar_x,
      
      // |===| Outputs.
      svar_y1: svar_y1,
      svar_y2: svar_y2,
      
      // |===| Locals.
      svar_abs_3: svar_abs_3,
      svar_abs_2: svar_abs_2,
      svar_abs_1: svar_abs_1,
      svar_abs_0: svar_abs_0,
      svar_center: svar_center,
      svar_right: svar_right,
      svar_left: svar_left,
      svar_d: svar_d,
      svar_pcenter7: svar_pcenter7,
      svar_pcenter6: svar_pcenter6,
      svar_pcenter5: svar_pcenter5,
      svar_pcenter4: svar_pcenter4,
      svar_pcenter3: svar_pcenter3,
      svar_pcenter2: svar_pcenter2,
      svar_pcenter1: svar_pcenter1,
      
      // |===| Calls.
      center_calc1_1: center_calc1_1,
      center_calc1_0: center_calc1_0,
    } 
  }

  fn next(&mut self, input: Self::Input) {
    // |===| Retrieving inputs.
    let svar_i = input.0 ;
    let svar_x = input.1 ;
    
    // |===| Computing next state.
    let svar_pcenter1 = - 1f64 ;
    let svar_pcenter2 = - 19f64 / 20f64 ;
    let svar_pcenter3 = - 9f64 / 10f64 ;
    let svar_pcenter4 = 0f64 ;
    let svar_pcenter5 = 9f64 / 10f64 ;
    let svar_pcenter6 = 19f64 / 20f64 ;
    let svar_pcenter7 = 1f64 ;
    let svar_d = 7 ;
    let svar_left = ((svar_i == 1) & (svar_x < svar_pcenter1)) ;
    let svar_right = ((svar_i == svar_d) & (svar_x > svar_pcenter7)) ;
    let svar_center = ( if (svar_left | svar_right) { false } else {true } ) ;
    let svar_abs_0 = true ;
    let svar_abs_2 = false ;
    /*let center_calc1_1 = */ self.center_calc1_1.next( (
      svar_i,
      svar_x,
      svar_abs_0,
    ) ) ;
    let (
      svar_abs_1,
    ) = self.center_calc1_1.output() ;
    /*let center_calc1_0 = */ self.center_calc1_0.next( (
      svar_i,
      svar_x,
      svar_abs_2,
    ) ) ;
    let (
      svar_abs_3,
    ) = self.center_calc1_0.output() ;
    let svar_y2 = ( if svar_left { 0f64 } else {( if svar_right { 1f64 } else {svar_abs_3 } ) } ) ;
    let svar_y1 = ( if svar_left { 1f64 } else {( if svar_right { 0f64 } else {svar_abs_1 } ) } ) ;
    
    // |===| Checking assertions.
    
    
    // |===| Checking assumptions.
    
    
    // |===| Updating next state.
    // |===| Inputs.
    self.svar_i = svar_i ;
    self.svar_x = svar_x ;
    
    // |===| Outputs.
    self.svar_y1 = svar_y1 ;
    self.svar_y2 = svar_y2 ;
    
    // |===| Locals.
    self.svar_abs_3 = svar_abs_3 ;
    self.svar_abs_2 = svar_abs_2 ;
    self.svar_abs_1 = svar_abs_1 ;
    self.svar_abs_0 = svar_abs_0 ;
    self.svar_center = svar_center ;
    self.svar_right = svar_right ;
    self.svar_left = svar_left ;
    self.svar_d = svar_d ;
    self.svar_pcenter7 = svar_pcenter7 ;
    self.svar_pcenter6 = svar_pcenter6 ;
    self.svar_pcenter5 = svar_pcenter5 ;
    self.svar_pcenter4 = svar_pcenter4 ;
    self.svar_pcenter3 = svar_pcenter3 ;
    self.svar_pcenter2 = svar_pcenter2 ;
    self.svar_pcenter1 = svar_pcenter1 ;
    
    // |===| Calls.
    /*self.center_calc1_1 = center_calc1_1 ;
    self.center_calc1_0 = center_calc1_0 ;*/ 
    
    // |===| Return new state.
    /*Ok( self )*/
  }

  fn output(& self) -> Self::Output {(
    self.svar_y1,
    self.svar_y2,
  )}
/*  fn output_str(& self) -> String {
      format!(
        "{}, \
        {}",
        self.svar_y1,
        self.svar_y2
      )
    }*/
}

/// Stores the state for sub-node `center_calc1`.
///
/// # Inputs
///
/// | Lustre identifier | Type |
/// |:---:|:---|
/// | `i` | Int |
/// | `x` | Real |
/// | `first` | Bool |
///
/// # Outputs
///
/// | Lustre identifier | Type |
/// |:---:|:---|
/// | `y` | Real |
///
/// # Sub systems
///
/// No subsystems for this system.
///
/// # Assertions
///
/// /// No assertions for this system.
///
/// # Assumptions
///
/// No assumptions for this system.
///
#[repr(C)]
  pub struct Center_calc1 {
  /// Input: `center_calc1.usr.i`
  pub svar_i: Int,
  /// Input: `center_calc1.usr.x`
  pub svar_x: Real,
  /// Input: `center_calc1.usr.first`
  pub svar_first: Bool,

  /// Output: `center_calc1.usr.y`
  pub svar_y: Real,

  /// Local, local: `center_calc1.impl.usr.center_a`
  pub svar_center_a: Real,
  /// Local, local: `center_calc1.impl.usr.center`
  pub svar_center: Real,
  /// Local, local: `center_calc1.impl.usr.i_incr`
  pub svar_i_incr: Int,

}

impl Sys for Center_calc1 {
  type Input = (
    Int, // svar_i (center_calc1.usr.i)
    Real, // svar_x (center_calc1.usr.x)
    Bool, // svar_first (center_calc1.usr.first)
  ) ;
  type Output = (
    Real, // svar_y (center_calc1.usr.y)
  ) ;
/*  fn arity() -> usize { 3 }
*//*  fn input_of(vec: Vec<String>) -> Result<Self::Input, String> {
        match vec.len() {
          n if n == Self::arity() => {
            (
              try!( parse::int(& vec[0]) ), 
              try!( parse::real(& vec[1]) ), 
              try!( parse::bool(& vec[2]) ),
            ) 
          },
          n => Err(
            format!(
              "arity mismatch, expected {} but got {}: {:?}",
              Self::arity(), n, vec
            )
            
          ),
        }
      }

*/   fn init(input: Self::Input) -> Self {
    // |===| Retrieving inputs.
    let svar_i = input.0 ;
    let svar_x = input.1 ;
    let svar_first = input.2 ;
    
    // |===| Computing initial state.
    let svar_center = ( if (svar_i == 1) { - 1f64 } else {( if (svar_i == 2) { - 19f64 / 20f64 } else {( if (svar_i == 3) { - 9f64 / 10f64 } else {( if (svar_i == 4) { 0f64 } else {( if (svar_i == 5) { 9f64 / 10f64 } else {( if (svar_i == 6) { 24f64 / 25f64 } else {1f64 } ) } ) } ) } ) } ) } ) ;
    let svar_i_incr = (svar_i + 1) ;
    let svar_center_a = ( if (svar_i_incr == 1) { - 1f64 } else {( if (svar_i_incr == 2) { - 19f64 / 20f64 } else {( if (svar_i_incr == 3) { - 9f64 / 10f64 } else {( if (svar_i_incr == 4) { 0f64 } else {( if (svar_i_incr == 5) { 9f64 / 10f64 } else {( if (svar_i_incr == 6) { 24f64 / 25f64 } else {1f64 } ) } ) } ) } ) } ) } ) ;
    let svar_y = ( if svar_first { ((svar_center_a - svar_x) / (svar_center_a - svar_center)) } else {((svar_x - svar_center) / (svar_center_a - svar_center)) } ) ;
    
    // |===| Checking assertions.
    
    
    
    
    // |===| Returning initial state.
    Center_calc1 {
      // |===| Inputs.
      svar_i: svar_i,
      svar_x: svar_x,
      svar_first: svar_first,
      
      // |===| Outputs.
      svar_y: svar_y,
      
      // |===| Locals.
      svar_center_a: svar_center_a,
      svar_center: svar_center,
      svar_i_incr: svar_i_incr,
      
      // |===| Calls.
      
    } 
  }

  fn next(&mut self, input: Self::Input) {
    // |===| Retrieving inputs.
    let svar_i = input.0 ;
    let svar_x = input.1 ;
    let svar_first = input.2 ;
    
    // |===| Computing next state.
    let svar_center = ( if (svar_i == 1) { - 1f64 } else {( if (svar_i == 2) { - 19f64 / 20f64 } else {( if (svar_i == 3) { - 9f64 / 10f64 } else {( if (svar_i == 4) { 0f64 } else {( if (svar_i == 5) { 9f64 / 10f64 } else {( if (svar_i == 6) { 24f64 / 25f64 } else {1f64 } ) } ) } ) } ) } ) } ) ;
    let svar_i_incr = (svar_i + 1) ;
    let svar_center_a = ( if (svar_i_incr == 1) { - 1f64 } else {( if (svar_i_incr == 2) { - 19f64 / 20f64 } else {( if (svar_i_incr == 3) { - 9f64 / 10f64 } else {( if (svar_i_incr == 4) { 0f64 } else {( if (svar_i_incr == 5) { 9f64 / 10f64 } else {( if (svar_i_incr == 6) { 24f64 / 25f64 } else {1f64 } ) } ) } ) } ) } ) } ) ;
    let svar_y = ( if svar_first { ((svar_center_a - svar_x) / (svar_center_a - svar_center)) } else {((svar_x - svar_center) / (svar_center_a - svar_center)) } ) ;
    
    // |===| Checking assertions.
    
    
    // |===| Checking assumptions.
    
    
    // |===| Updating next state.
    // |===| Inputs.
    self.svar_i = svar_i ;
    self.svar_x = svar_x ;
    self.svar_first = svar_first ;
    
    // |===| Outputs.
    self.svar_y = svar_y ;
    
    // |===| Locals.
    self.svar_center_a = svar_center_a ;
    self.svar_center = svar_center ;
    self.svar_i_incr = svar_i_incr ;
    
    // |===| Calls.
    /**/ 
    
    // |===| Return new state.
    /*Ok( self )*/
  }

  fn output(& self) -> Self::Output {(
    self.svar_y,
  )}
/*  fn output_str(& self) -> String {
      format!(
        "{}",
        self.svar_y
      )
    }*/
}



/// Types and structures for systems.
pub mod helpers {
 /* use std::io::{ Stdin, stdin } ;
  use std::process::exit ;

  /// Prints usage.
  pub fn help() {
    println!("") ;
    println!("\
Options:
  -h, --help
    prints this message
  --center_calc1
    inputs:  Int (i)
             Real (x)
             Bool (first)
    outputs: Real (y)
  --pkmfuzzy
    inputs:  Int (i)
             Real (x)
    outputs: Real (y1)
             Real (y2)
Usage:
  Inputs (outputs) are read (printed) as comma-separated values on a single
  line.
  The read-eval-print loop runs forever, write \"exit\" or \"quit\"
  to exit it cleanly.
Default system: \"pkmfuzzy\".\
    ") ;
    println!("")
  }

  /// Prints usage, an error, and exits with status `2`.
  pub fn error<T: ::std::fmt::Display>(e: T) {
    help() ;
    println!("Error: {}", e) ;
    println!("") ;
    exit(2)
  }

  /// Handles CLA.
  pub fn clap_and_run() {
    use std::env::args ;
    let mut args = args() ;
    // Skipping first argument (name of binary).
    match args.next() {
      Some(_) => (),
      None => unreachable!(),
    } ;
    if let Some(arg) = args.next() {
      match & arg as & str {
        "-h" | "--help" => {
          help() ;
          exit(0)
        },
        "--center_calc1" => super::Center_calc1::run(),
        "--pkmfuzzy" => super::Pkmfuzzy::run(),
        arg => error(
          format!("unexpected argument \"{}\".", arg)
        ),
      }
    } ;
    // If no argument given, run top system.
    super::Pkmfuzzy::run()
  }*/

  /// Alias for `i64`.
  pub type Int = i64 ;
  /// Alias for `f64`.
  pub type Real = f64 ;
  /// Alias for `bool`.
  pub type Bool = bool ;

  /// Stores an `Stdin` and a buffer to read lines.
   /* pub struct InputReader {
    /// Standard input.
    stdin: Stdin,
    /// String buffer.
    buff: String,
  }
  impl InputReader {
    /// Creates an input reader.
    pub fn mk() -> Self {
      InputReader {
        stdin: stdin(),
        buff: String::with_capacity(100),
      }
    }
    /// Reads comma separated inputs from standard input.
    pub fn read_inputs(& mut self) -> Result<Vec<String>, String> {
      self.buff.clear() ;
      match self.stdin.read_line(& mut self.buff) {
        Ok(_) => (),
        Err(e) => return Err(
          format!("could not read line from stdin: {}", e)
        ),
      } ;
      let chars = self.buff.trim_left().chars() ;
      let mut buff = String::new() ;
      let mut vec = vec![] ;
      for c in chars {
        match c {
          ' ' | '\t' => (),
          ',' | '\n' => {
            vec.push(buff.clone()) ;
            buff.clear()
          },
          _ => buff.push(c),
        }
      } ;
      if vec.len() > 1 {
        match vec[0].trim() {
          "exit" | "quit" => exit(0),
          _ => ()
        }
      } ;
      Ok(vec)
    }
  } */

  /// Trait all systems must implement.
  pub trait Sys: Sized {
    /// Type of inputs.
    type Input ;
    /// Type of outputs.
    type Output ;
    /// Number of inputs expected.
    /*fn arity() -> usize ;
    /// Parses a vector of inputs.
    fn input_of(Vec<String>) -> Result<Self::Input, String> ;*/
    /// Initial state of the system.
    fn init(input: Self::Input) -> Self ;
    /// Computes the next step.
    fn next(&mut self, input: Self::Input) ;
    /// Reads inputs from standard input, computes initial state, prints output.
    /* fn read_init(reader: & mut InputReader) -> Result<Self, String> {
      match Self::input_of( try!(reader.read_inputs()) ) {
        Ok(inputs) => {
          let init = try!( Self::init(inputs) ) ;
          println!("{}", init.output_str()) ;
          Ok(init)
        },
        Err(s) => Err(s),
      }
    } */
    fn read_init(input: Self::Input) -> Self{
      Self::init(input)
    }

    /// Reads inputs from standard input, computes next step, prints output.
    /* fn read_next(self, reader: & mut InputReader) -> Result<Self, String> {
      match Self::input_of( try!(reader.read_inputs()) ) {
        Ok(inputs) => {
          let next = try!( self.next(inputs) ) ;
          println!("{}", next.output_str()) ;
          Ok(next)
        },
        Err(s) => Err(s),
      }
    } */
    fn read_next(&mut self, input: Self::Input){
      self.next(input);
    }

    /// Output of the system.
    fn output(& self) -> Self::Output ;
    // String representation of the output.
    // fn output_str(& self) -> String ;
    // Runs a never-ending, read-eval-print loop on the system.
    /* fn run() -> ! {
      let mut reader = InputReader::mk() ;
      let mut state = match Self::read_init(& mut reader) {
        Ok(init) => init,
        Err(e) => {
          println!("(Error: {})", e) ;
          exit(2)
        }
      } ;
      loop {
        match state.read_next(& mut reader) {
          Ok(next) => state = next,
          Err(e) => {
            println!("(Error: {})", e) ;
            exit(2)
          }
        }
      }
    } */
  }
}

// Parsing functions.
/* pub mod parse {
  use helpers::{ Int, Real, Bool } ;
  use std::fmt::Display ;
  use std::str::FromStr ;
  /// Generic parser to factor error handling out.
  fn generic<
    Out, Error: Display, F: Fn(& str) -> Result<Out, Error>
  >(s: & str, f: F, typ3: & 'static str) -> Result<Out, String> {
    match f(s) {
      Ok(res) => Ok(res),
      Err(e) => Err(
        format!("could not parse \"{}\" as {}: {}", s, typ3, e)
      ),
    }
  }
  /// Parses a [`Bool`](../type.Bool.html).
  pub fn bool(s: & str) -> Result<Bool, String> {
    generic(
      s,
      |s| match s {
        "true" | "on" => Ok(true),
        "false" | "off" => Ok(false),
        _ => Err(
          format!("legal values: true, on, false, off")
        ),
      },
      "a bool"
    )
  }
  /// Parses an [`Int`](../type.Int.html).
  pub fn int(s: & str) -> Result<Int, String> {
    generic(s, |s| Int::from_str(s), "an int")
  }
  /// Parses a [`Real`](../type.Real.html).
  pub fn real(s: & str) -> Result<Real, String> {
    generic(s, |s| Real::from_str(s), "a real")
  }
} */


