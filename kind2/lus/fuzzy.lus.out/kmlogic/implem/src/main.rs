//! Implementation for lustre node `kmlogic` (see [Kmlogic](struct.Kmlogic.html)).
//!
//! Code generated by the [Kind 2 model checker][kind 2].
//!
//! [kind 2]: http://kind2-mc.github.io/kind2/ (The Kind 2 model checker)

// Deactiving lint warnings the transformation does not respect.
#![allow(
  non_upper_case_globals, non_snake_case, non_camel_case_types,
  unused_variables, unused_parens
)]

#![no_std]

use helpers::* ;

/// Entry point.
fn main() {
  // clap_and_run()
}


/// Stores the state for **top node** `kmlogic`.
///
/// # Inputs
///
/// | Lustre identifier | Type |
/// |:---:|:---|
/// | `pinput` | Real |
/// | `dinput` | Real |
///
/// # Outputs
///
/// | Lustre identifier | Type |
/// |:---:|:---|
/// | `g` | Real |
///
/// # Sub systems
///
/// | Lustre identifier | Struct | Inputs | Outputs | Position |
/// |:---:|:---:|:---:|:---:|:---:|
/// | `dy2fuzzify` | [Dy2fuzzify](struct.Dy2fuzzify.html) | `dloc`, `dinput` | `abs_13` | [fuzzy.lus line 67](../src/lus/fuzzy.lus.html#67) |
/// | `dy1fuzzify` | [Dy1fuzzify](struct.Dy1fuzzify.html) | `dloc`, `dinput` | `abs_12` | [fuzzy.lus line 66](../src/lus/fuzzy.lus.html#66) |
/// | `y2fuzzify` | [Y2fuzzify](struct.Y2fuzzify.html) | `ploc`, `pinput` | `abs_11` | [fuzzy.lus line 64](../src/lus/fuzzy.lus.html#64) |
/// | `y1fuzzify` | [Y1fuzzify](struct.Y1fuzzify.html) | `ploc`, `pinput` | `abs_10` | [fuzzy.lus line 63](../src/lus/fuzzy.lus.html#63) |
/// | `rule_base` | [Rule_base](struct.Rule_base.html) | `abs_8` | `abs_9` | [fuzzy.lus line 61](../src/lus/fuzzy.lus.html#61) |
/// | `rule_base` | [Rule_base](struct.Rule_base.html) | `abs_6` | `abs_7` | [fuzzy.lus line 60](../src/lus/fuzzy.lus.html#60) |
/// | `rule_base` | [Rule_base](struct.Rule_base.html) | `abs_4` | `abs_5` | [fuzzy.lus line 58](../src/lus/fuzzy.lus.html#58) |
/// | `rule_base` | [Rule_base](struct.Rule_base.html) | `abs_2` | `abs_3` | [fuzzy.lus line 57](../src/lus/fuzzy.lus.html#57) |
/// | `findlocation_d` | [Findlocation_d](struct.Findlocation_d.html) | `dinput` | `abs_1` | [fuzzy.lus line 49](../src/lus/fuzzy.lus.html#49) |
/// | `findlocation_p` | [Findlocation_p](struct.Findlocation_p.html) | `pinput` | `abs_0` | [fuzzy.lus line 48](../src/lus/fuzzy.lus.html#48) |
///
/// # Assertions
///
/// /// No assertions for this system.
///
/// # Assumptions
///
/// No assumptions for this system.
///
#[repr(C)]
  pub struct Kmlogic {
  /// Input: `kmlogic.usr.pinput`
  pub svar_pinput: Real,
  /// Input: `kmlogic.usr.dinput`
  pub svar_dinput: Real,

  /// Output: `kmlogic.usr.g`
  pub svar_g: Real,

  /// Local, alias(kmlogic.impl.usr.dy2): `kmlogic.res.abs_13`
  pub svar_abs_13: Real,
  /// Local, alias(kmlogic.impl.usr.dy1): `kmlogic.res.abs_12`
  pub svar_abs_12: Real,
  /// Local, alias(kmlogic.impl.usr.py2): `kmlogic.res.abs_11`
  pub svar_abs_11: Real,
  /// Local, alias(kmlogic.impl.usr.py1): `kmlogic.res.abs_10`
  pub svar_abs_10: Real,
  /// Local, alias(kmlogic.impl.usr.second_row_2): `kmlogic.res.abs_9`
  pub svar_abs_9: Real,
  /// Local, invisible local: `kmlogic.res.abs_8`
  pub svar_abs_8: Int,
  /// Local, alias(kmlogic.impl.usr.second_row_1): `kmlogic.res.abs_7`
  pub svar_abs_7: Real,
  /// Local, invisible local: `kmlogic.res.abs_6`
  pub svar_abs_6: Int,
  /// Local, alias(kmlogic.impl.usr.first_row_2): `kmlogic.res.abs_5`
  pub svar_abs_5: Real,
  /// Local, invisible local: `kmlogic.res.abs_4`
  pub svar_abs_4: Int,
  /// Local, alias(kmlogic.impl.usr.first_row_1): `kmlogic.res.abs_3`
  pub svar_abs_3: Real,
  /// Local, invisible local: `kmlogic.res.abs_2`
  pub svar_abs_2: Int,
  /// Local, alias(kmlogic.impl.usr.dlo): `kmlogic.res.abs_1`
  pub svar_abs_1: Int,
  /// Local, alias(kmlogic.impl.usr.plo): `kmlogic.res.abs_0`
  pub svar_abs_0: Int,
  /// Local, local: `kmlogic.impl.usr.dy2`
  pub svar_dy2: Real,
  /// Local, local: `kmlogic.impl.usr.dy1`
  pub svar_dy1: Real,
  /// Local, local: `kmlogic.impl.usr.py2`
  pub svar_py2: Real,
  /// Local, local: `kmlogic.impl.usr.py1`
  pub svar_py1: Real,
  /// Local, local: `kmlogic.impl.usr.second_row_2`
  pub svar_second_row_2: Real,
  /// Local, local: `kmlogic.impl.usr.second_row_1`
  pub svar_second_row_1: Real,
  /// Local, local: `kmlogic.impl.usr.first_row_2`
  pub svar_first_row_2: Real,
  /// Local, local: `kmlogic.impl.usr.first_row_1`
  pub svar_first_row_1: Real,
  /// Local, local: `kmlogic.impl.usr.dloc_next`
  pub svar_dloc_next: Int,
  /// Local, local: `kmlogic.impl.usr.dloc`
  pub svar_dloc: Int,
  /// Local, local: `kmlogic.impl.usr.ploc_next`
  pub svar_ploc_next: Int,
  /// Local, local: `kmlogic.impl.usr.ploc`
  pub svar_ploc: Int,
  /// Local, local: `kmlogic.impl.usr.dlo`
  pub svar_dlo: Int,
  /// Local, local: `kmlogic.impl.usr.plo`
  pub svar_plo: Int,

  /// Call to `findlocation_p` ([fuzzy.lus line 48](../src/lus/fuzzy.lus.html#48)).
  pub findlocation_p_9: Findlocation_p,
  /// Call to `findlocation_d` ([fuzzy.lus line 49](../src/lus/fuzzy.lus.html#49)).
  pub findlocation_d_8: Findlocation_d,
  /// Call to `rule_base` ([fuzzy.lus line 57](../src/lus/fuzzy.lus.html#57)).
  pub rule_base_7: Rule_base,
  /// Call to `rule_base` ([fuzzy.lus line 58](../src/lus/fuzzy.lus.html#58)).
  pub rule_base_6: Rule_base,
  /// Call to `rule_base` ([fuzzy.lus line 60](../src/lus/fuzzy.lus.html#60)).
  pub rule_base_5: Rule_base,
  /// Call to `rule_base` ([fuzzy.lus line 61](../src/lus/fuzzy.lus.html#61)).
  pub rule_base_4: Rule_base,
  /// Call to `y1fuzzify` ([fuzzy.lus line 63](../src/lus/fuzzy.lus.html#63)).
  pub y1fuzzify_3: Y1fuzzify,
  /// Call to `y2fuzzify` ([fuzzy.lus line 64](../src/lus/fuzzy.lus.html#64)).
  pub y2fuzzify_2: Y2fuzzify,
  /// Call to `dy1fuzzify` ([fuzzy.lus line 66](../src/lus/fuzzy.lus.html#66)).
  pub dy1fuzzify_1: Dy1fuzzify,
  /// Call to `dy2fuzzify` ([fuzzy.lus line 67](../src/lus/fuzzy.lus.html#67)).
  pub dy2fuzzify_0: Dy2fuzzify,
}

impl Sys for Kmlogic {
  type Input = (
    Real, // svar_pinput (kmlogic.usr.pinput)
    Real, // svar_dinput (kmlogic.usr.dinput)
  ) ;
  type Output = (
    Real, // svar_g (kmlogic.usr.g)
  ) ;
/*  fn arity() -> usize { 2 }
*//*  fn input_of(vec: Vec<String>) -> Result<Self::Input, String> {
        match vec.len() {
          n if n == Self::arity() => {
            (
              try!( parse::real(& vec[0]) ), 
              try!( parse::real(& vec[1]) ),
            ) 
          },
          n => Err(
            format!(
              "arity mismatch, expected {} but got {}: {:?}",
              Self::arity(), n, vec
            )
            
          ),
        }
      }

