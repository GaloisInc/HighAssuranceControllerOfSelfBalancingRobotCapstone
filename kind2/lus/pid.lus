(* Artem K*)


(*Compute function, checks if SampleTime limit reached and calls PID calculate *)
node Compute(Input:real; Now:real; Setpoint:real; Kp:real; Ki:real; Kd:real; SampleTime:real;) returns(Output:real;);

let

            Output =  if (Now - (0.0 -> pre Now) >= SampleTime) then
   
                    
                    Compute_calc(Input, Now, Setpoint, Kp, Ki, Kd, SampleTime)
   
            else
   
                    0.0 -> pre Output;

tel;


(*PID calculation function that does the actually math*)

node Compute_calc(Input:real; Now:real; Setpoint:real; Kp:real; Ki:real; Kd:real; SampleTime:real;) returns(Output:real;);

var
    dInput:real;
    error:real;
    outputSum:real;
    
    let 
        dInput = Input - (0.0 -> pre Input);
        error = Setpoint - Input;
        
        outputSum = 0.0 -> pre outputSum + Ki * error * SampleTime/1000.0;
    
        outputSum = if (outputSum > 1000.0) then 1000.0 else if (outputSum < -1000.0) then 1000.0 else outputSum;
        
        Output = Kp * error + Ki * error * SampleTime/1000.0 - Kd * dInput * 1000.0/SampleTime;
        
        Output = if (Output > 1000.0) then 1000.0 else if (Output < -1000.0) then 1000.0 else Output;
        
        
    tel;
    
    
(* function to limit values between -1k to 1k for Arduino PWM *)

function limit (x:real;) returns (y:real;);

let

  (* y = if (x > 1000.0) then 1000.0 else if (x < -1000.0) then -1000.0 else x;*)
  
  y = if (x > 1000.0) then 1000.0 else 0.0;

tel;
